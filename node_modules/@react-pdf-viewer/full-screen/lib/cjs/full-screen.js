'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@react-pdf-viewer/core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var ExitFullScreenIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M10.515,9.514h3c0.552,0,1,0.448,1,1v3c0,0.552-0.448,1-1,1h-3c-0.552,0-1-0.448-1-1v-3\n                C9.515,9.962,9.963,9.514,10.515,9.514z\n                M0.531,23.499l6.984-6.985\n                M16.515,7.514L23.5,0.529\n                M21.515,7.514h-5v-5\n                M7.515,21.514v-5 h-5\n                M0.523,0.521l6.992,6.993\n                M16.515,16.514l6.985,6.985\n                M16.515,21.514v-5h5\n                M2.515,7.514h5v-5" })));
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var FullScreenIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M15.5,8.499l8-8\n                M0.5,23.499l8-8\n                M5.5,23.499h-5v-5\n                M23.5,5.499v-5h-5\n                M15.5,15.499l8,8\n                M0.5,0.499l8,8\n                M0.5,5.499v-5h5\n                M18.5,23.499h5v-5" })));
};

var TOOLTIP_OFFSET = { left: 0, top: 8 };
var EnterFullScreenButton = function (_a) {
    var onClick = _a.onClick;
    var l10n = React.useContext(core.LocalizationContext);
    var label = l10n && l10n.fullScreen ? l10n.fullScreen.enterFullScreen : 'Full screen';
    return (React__default['default'].createElement(core.Tooltip, { position: core.Position.BottomCenter, target: React__default['default'].createElement(core.Button, { onClick: onClick },
            React__default['default'].createElement(FullScreenIcon, null)), content: function () { return label; }, offset: TOOLTIP_OFFSET }));
};

var Api;
(function (Api) {
    Api[Api["ExitFullScreen"] = 0] = "ExitFullScreen";
    Api[Api["FullScreenChange"] = 1] = "FullScreenChange";
    Api[Api["FullScreenElement"] = 2] = "FullScreenElement";
    Api[Api["FullScreenEnabled"] = 3] = "FullScreenEnabled";
    Api[Api["RequestFullScreen"] = 4] = "RequestFullScreen";
})(Api || (Api = {}));
var defaultVendor = {
    ExitFullScreen: 'exitFullscreen',
    FullScreenChange: 'fullscreenchange',
    FullScreenElement: 'fullscreenElement',
    FullScreenEnabled: 'fullscreenEnabled',
    RequestFullScreen: 'requestFullscreen',
};
var webkitVendor = {
    ExitFullScreen: 'webkitExitFullscreen',
    FullScreenChange: 'webkitfullscreenchange',
    FullScreenElement: 'webkitFullscreenElement',
    FullScreenEnabled: 'webkitFullscreenEnabled',
    RequestFullScreen: 'webkitRequestFullscreen',
};
var msVendor = {
    ExitFullScreen: 'msExitFullscreen',
    FullScreenChange: 'MSFullscreenChange',
    FullScreenElement: 'msFullscreenElement',
    FullScreenEnabled: 'msFullscreenEnabled',
    RequestFullScreen: 'msRequestFullscreen',
};
var isBrowser = typeof window !== 'undefined';
var vendor = isBrowser
    ? (Api.FullScreenEnabled in document && defaultVendor) ||
        (webkitVendor.FullScreenEnabled in document && webkitVendor) ||
        (msVendor.FullScreenEnabled in document && msVendor) ||
        defaultVendor
    : defaultVendor;
var addFullScreenChangeListener = function (handler) {
    if (isBrowser) {
        document.addEventListener(vendor.FullScreenChange, handler);
    }
};
var exitFullScreen = function (element) {
    return isBrowser
        ?
            element[vendor.ExitFullScreen]()
        : Promise.resolve({});
};
var getFullScreenElement = function () {
    return isBrowser ? document[vendor.FullScreenElement] : null;
};
var requestFullScreen = function (element) {
    if (isBrowser) {
        element[vendor.RequestFullScreen]();
    }
};

var EnterFullScreen = function (_a) {
    var children = _a.children, store = _a.store;
    var pagesRef = React.useRef(null);
    var closeOtherFullScreen = function () {
        var pagesEle = pagesRef.current;
        if (!pagesEle) {
            return Promise.resolve();
        }
        var ele = getFullScreenElement();
        return (ele && ele !== pagesEle)
            ? exitFullScreen(ele)
            : Promise.resolve();
    };
    var enterFullScreen = function () {
        var pagesEle = pagesRef.current;
        if (!pagesEle) {
            return;
        }
        closeOtherFullScreen().then(function () {
            requestFullScreen(pagesEle);
        });
    };
    var onFullScreenChange = function () {
        var ele = getFullScreenElement();
        store.update('isFullScreen', ele === pagesRef.current);
    };
    var handlePagesRef = function (pagesRefFn) {
        pagesRef.current = pagesRefFn().current;
        addFullScreenChangeListener(onFullScreenChange);
    };
    React.useEffect(function () {
        store.subscribe('getPagesRef', handlePagesRef);
        return function () {
            store.unsubscribe('getPagesRef', handlePagesRef);
        };
    }, []);
    var defaultChildren = function (props) { return React__default['default'].createElement(EnterFullScreenButton, { onClick: props.onClick }); };
    var render = children || defaultChildren;
    return render({
        onClick: enterFullScreen,
    });
};

var ExitFullScreenButton = function (_a) {
    var store = _a.store;
    var _b = React.useState(false), isFullScreen = _b[0], setFullScreen = _b[1];
    var handleFullScreen = function (fullScreen) {
        setFullScreen(fullScreen);
    };
    var handleExitFullScreen = function () {
        setFullScreen(false);
        var pagesRef = store.get('getPagesRef');
        if (!pagesRef) {
            return;
        }
        var pagesEle = pagesRef().current;
        if (!pagesEle) {
            return;
        }
        var ele = getFullScreenElement();
        if (ele && ele === pagesEle) {
            exitFullScreen(document);
        }
    };
    React.useEffect(function () {
        store.subscribe('isFullScreen', handleFullScreen);
        return function () {
            store.unsubscribe('isFullScreen', handleFullScreen);
        };
    }, []);
    return (React__default['default'].createElement(React__default['default'].Fragment, null, isFullScreen &&
        React__default['default'].createElement("div", { className: 'rpv-full-screen-exit-button' },
            React__default['default'].createElement("div", { className: 'rpv-full-screen-exit-button-inner' },
                React__default['default'].createElement(core.Button, { onClick: handleExitFullScreen },
                    React__default['default'].createElement(ExitFullScreenIcon, null))))));
};

var fullScreenPlugin = function () {
    var store = core.createStore({});
    var EnterFullScreenDecorator = function (props) { return (React__default['default'].createElement(EnterFullScreen, __assign({}, props, { store: store }))); };
    var EnterFullScreenButtonDecorator = function () { return (React__default['default'].createElement(EnterFullScreenDecorator, null, function (props) { return React__default['default'].createElement(EnterFullScreenButton, __assign({}, props)); })); };
    var ExitFullScreenDecorator = function () { return (React__default['default'].createElement(ExitFullScreenButton, { store: store })); };
    var renderViewer = function (props) {
        var currentSlot = props.slot;
        if (currentSlot.subSlot) {
            currentSlot.subSlot.children = (React__default['default'].createElement(React__default['default'].Fragment, null,
                React__default['default'].createElement(ExitFullScreenDecorator, null),
                currentSlot.subSlot.children));
        }
        return currentSlot;
    };
    return {
        install: function (pluginFunctions) {
            store.update('getPagesRef', pluginFunctions.getPagesRef);
        },
        renderViewer: renderViewer,
        EnterFullScreen: EnterFullScreenDecorator,
        EnterFullScreenButton: EnterFullScreenButtonDecorator,
    };
};

exports.ExitFullScreenIcon = ExitFullScreenIcon;
exports.FullScreenIcon = FullScreenIcon;
exports.fullScreenPlugin = fullScreenPlugin;
