'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@react-pdf-viewer/core');
var reactDom = require('react-dom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var PrintIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M7.5,19.499h9 M7.5,16.499h9 M5.5,16.5h-3c-1.103-0.003-1.997-0.897-2-2v-6c0.003-1.103,0.897-1.997,2-2h19\n                c1.103,0.003,1.997,0.897,2,2v6c-0.003,1.103-0.897,1.997-2,2h-3\n                M5.5,4.5v-4h9.586c0.265,0,0.52,0.105,0.707,0.293l2.414,2.414\n                C18.395,3.394,18.5,3.649,18.5,3.914V4.5\n                M18.5,22.5c0,0.552-0.448,1-1,1h-11c-0.552,0-1-0.448-1-1v-9h13V22.5z\n                M3.5,8.499\n                c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S2.948,8.499,3.5,8.499z\n                M14.5,0.499v4h4" })));
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var TOOLTIP_OFFSET = { left: 0, top: 8 };
var PrintButton = function (_a) {
    var onClick = _a.onClick;
    var l10n = React.useContext(core.LocalizationContext);
    var label = l10n && l10n.print ? l10n.print.print : 'Print';
    return (React__default['default'].createElement(core.Tooltip, { position: core.Position.BottomCenter, target: React__default['default'].createElement(core.Button, { onClick: onClick },
            React__default['default'].createElement(PrintIcon, null)), content: function () { return label; }, offset: TOOLTIP_OFFSET }));
};

var PrintStatus;
(function (PrintStatus) {
    PrintStatus["Inactive"] = "Inactive";
    PrintStatus["Preparing"] = "Preparing";
    PrintStatus["Cancelled"] = "Cancelled";
    PrintStatus["Ready"] = "Ready";
})(PrintStatus || (PrintStatus = {}));
var PrintStatus$1 = PrintStatus;

var Print = function (_a) {
    var children = _a.children, store = _a.store;
    var print = function () {
        store.update('printStatus', PrintStatus$1.Preparing);
    };
    var defaultChildern = function (props) { return React__default['default'].createElement(PrintButton, { onClick: props.onClick }); };
    var render = children || defaultChildern;
    return render({
        onClick: print,
    });
};

var PrintProgress = function (_a) {
    var numLoadedPages = _a.numLoadedPages, numPages = _a.numPages, onCancel = _a.onCancel, onStartPrinting = _a.onStartPrinting;
    var l10n = React.useContext(core.LocalizationContext);
    var progress = Math.floor(numLoadedPages * 100 / numPages);
    React.useEffect(function () {
        if (numLoadedPages === numPages) {
            onStartPrinting();
        }
    }, [numLoadedPages]);
    return (React__default['default'].createElement("div", { className: 'rpv-print-progress' },
        React__default['default'].createElement("div", { className: 'rpv-print-progress-inner' },
            React__default['default'].createElement("div", { className: 'rpv-print-progress-message' }, l10n && l10n.print ? l10n.print.preparingDocument : 'Preparing document ...'),
            React__default['default'].createElement("div", { className: 'rpv-print-progress-bar' },
                React__default['default'].createElement(core.ProgressBar, { progress: progress })),
            React__default['default'].createElement(core.PrimaryButton, { onClick: onCancel }, l10n && l10n.print ? l10n.print.cancel : 'Cancel'))));
};

var PageThumbnail = function (_a) {
    var page = _a.page, pageHeight = _a.pageHeight, pageWidth = _a.pageWidth, rotation = _a.rotation, onLoad = _a.onLoad;
    var renderTask = React.useRef();
    var _b = React.useState(''), src = _b[0], setSrc = _b[1];
    React.useEffect(function () {
        var task = renderTask.current;
        if (task) {
            task.cancel();
        }
        var canvas = document.createElement('canvas');
        var printUnit = 150 / 72;
        canvas.height = Math.floor(pageHeight * printUnit);
        canvas.width = Math.floor(pageWidth * printUnit);
        var canvasContext = canvas.getContext('2d');
        canvasContext.save();
        canvasContext.fillStyle = 'rgb(255, 255, 255)';
        canvasContext.fillRect(0, 0, canvas.width, canvas.height);
        canvasContext.restore();
        var viewport = page.getViewport({ rotation: rotation, scale: 1 });
        renderTask.current = page.render({
            canvasContext: canvasContext,
            intent: 'print',
            transform: [printUnit, 0, 0, printUnit, 0, 0],
            viewport: viewport,
        });
        renderTask.current.promise.then(function () {
            ('toBlob' in canvas)
                ? canvas.toBlob(function (blob) {
                    setSrc(URL.createObjectURL(blob));
                })
                : setSrc(canvas.toDataURL());
        }, function () { });
    }, []);
    return (!src
        ? React__default['default'].createElement(core.Spinner, null)
        : (React__default['default'].createElement("div", { className: 'rpv-print-page-thumbnail', style: {
                height: Math.floor(pageHeight * 96 / 72) + "px",
                width: Math.floor(pageWidth * 96 / 72) + "px",
            } },
            React__default['default'].createElement("img", { src: src, style: {
                    height: Math.floor(pageHeight * 96 / 72) + "px",
                    width: Math.floor(pageWidth * 96 / 72) + "px",
                }, onLoad: onLoad }))));
};

var PageThumbnailContainer = function (_a) {
    var doc = _a.doc, pageHeight = _a.pageHeight, pageIndex = _a.pageIndex, pageWidth = _a.pageWidth, rotation = _a.rotation, onLoad = _a.onLoad;
    var _b = React.useState({
        height: pageHeight,
        page: null,
        viewportRotation: 0,
        width: pageWidth,
    }), pageSize = _b[0], setPageSize = _b[1];
    var page = pageSize.page, height = pageSize.height, width = pageSize.width;
    var isVertical = Math.abs(rotation) % 180 === 0;
    React.useEffect(function () {
        doc.getPage(pageIndex + 1).then(function (pdfPage) {
            var viewport = pdfPage.getViewport({ scale: 1 });
            setPageSize({
                height: viewport.height,
                page: pdfPage,
                viewportRotation: viewport.rotation,
                width: viewport.width,
            });
        });
    }, []);
    var rotationNumber = (rotation + pageSize.viewportRotation) % 360;
    return (!page
        ? React__default['default'].createElement(core.Spinner, null)
        : (React__default['default'].createElement(PageThumbnail, { page: page, pageHeight: isVertical ? height : width, pageWidth: isVertical ? width : height, rotation: rotationNumber, onLoad: onLoad })));
};

var PrintZone = function (_a) {
    var doc = _a.doc, pageHeight = _a.pageHeight, pageWidth = _a.pageWidth, printStatus = _a.printStatus, rotation = _a.rotation, onCancel = _a.onCancel, onLoad = _a.onLoad;
    var _b = React.useState(0), numLoadedPages = _b[0], setNumLoadedPages = _b[1];
    React.useEffect(function () {
        if (printStatus === PrintStatus$1.Ready) {
            document.body.classList.add('rpv-body-printing');
            window.print();
        }
        var handler = function () {
            if (printStatus === PrintStatus$1.Ready) {
                document.body.classList.remove('rpv-body-printing');
                onCancel();
            }
        };
        document.addEventListener('mousemove', handler);
        return function () { return document.removeEventListener('mousemove', handler); };
    }, [printStatus]);
    var numPages = doc.numPages;
    var loadPage = function () {
        var total = numLoadedPages + 1;
        setNumLoadedPages(total);
        onLoad(total);
    };
    return (reactDom.createPortal((React__default['default'].createElement(React__default['default'].Fragment, null,
        React__default['default'].createElement("div", { className: 'rpv-print-zone' }, Array(numPages).fill(0).map(function (_, index) {
            return (React__default['default'].createElement(PageThumbnailContainer, { key: index, doc: doc, pageHeight: pageHeight, pageIndex: index, pageWidth: pageWidth, rotation: rotation, onLoad: loadPage }));
        })),
        React__default['default'].createElement("style", { dangerouslySetInnerHTML: {
                __html: "\n                            @supports ((size:A4) and (size:1pt 1pt)) {\n                                @page { size: " + pageWidth + "pt " + pageHeight + "pt }\n                            }\n                        "
            } }))), document.body));
};

var PrintContainer = function (_a) {
    var doc = _a.doc, pageHeight = _a.pageHeight, pageWidth = _a.pageWidth, rotation = _a.rotation, store = _a.store;
    var _b = React.useState(PrintStatus$1.Inactive), printStatus = _b[0], setPrintStatus = _b[1];
    var _c = React.useState(0), numLoadedPagesForPrint = _c[0], setNumLoadedPagesForPrint = _c[1];
    var cancelPrinting = function () {
        setNumLoadedPagesForPrint(0);
        setPrintStatus(PrintStatus$1.Inactive);
    };
    var startPrinting = function () {
        setNumLoadedPagesForPrint(0);
        setPrintStatus(PrintStatus$1.Ready);
    };
    var handlePrintStatus = function (status) { return setPrintStatus(status); };
    React.useEffect(function () {
        store.subscribe('printStatus', handlePrintStatus);
        return function () {
            store.unsubscribe('printStatus', handlePrintStatus);
        };
    }, []);
    return (React__default['default'].createElement(React__default['default'].Fragment, null,
        printStatus === PrintStatus$1.Preparing && (React__default['default'].createElement(PrintProgress, { numLoadedPages: numLoadedPagesForPrint, numPages: doc.numPages, onCancel: cancelPrinting, onStartPrinting: startPrinting })),
        (printStatus === PrintStatus$1.Preparing || printStatus === PrintStatus$1.Ready) && (React__default['default'].createElement(PrintZone, { doc: doc, pageHeight: pageHeight, pageWidth: pageWidth, printStatus: printStatus, rotation: rotation, onCancel: cancelPrinting, onLoad: setNumLoadedPagesForPrint }))));
};

var printPlugin = function () {
    var store = core.createStore({
        printStatus: PrintStatus$1.Inactive,
    });
    var PrintDecorator = function (props) { return (React__default['default'].createElement(Print, __assign({}, props, { store: store }))); };
    var PrintButtonDecorator = function () { return (React__default['default'].createElement(PrintDecorator, null, function (props) { return React__default['default'].createElement(PrintButton, __assign({}, props)); })); };
    var renderViewer = function (props) {
        var slot = props.slot;
        var updateSlot = {
            children: (React__default['default'].createElement(React__default['default'].Fragment, null,
                React__default['default'].createElement(PrintContainer, { doc: props.doc, pageHeight: props.pageHeight, pageWidth: props.pageWidth, rotation: props.rotation, store: store }),
                slot.children))
        };
        return __assign(__assign({}, slot), updateSlot);
    };
    return {
        renderViewer: renderViewer,
        Print: PrintDecorator,
        PrintButton: PrintButtonDecorator,
    };
};

exports.PrintIcon = PrintIcon;
exports.printPlugin = printPlugin;
