'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@react-pdf-viewer/core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var HorizontalScrollingIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M6.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\n                M14.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\n                M22.5,21.5 c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z" })));
};

var ScrollMode;
(function (ScrollMode) {
    ScrollMode["Horizontal"] = "Horizontal";
    ScrollMode["Vertical"] = "Vertical";
    ScrollMode["Wrapped"] = "Wrapped";
})(ScrollMode || (ScrollMode = {}));
var ScrollMode$1 = ScrollMode;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var VerticalScrollingIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M23.5,5.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V5.5z\n                M23.5,13.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V13.5z\n                M23.5,21.5 c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V21.5z" })));
};

var WrappedScrollingIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M10.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n                M23.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n                M10.5,22.5 c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\n                M23.5,22.5c0,0.552-0.448,1-1,1 h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z" })));
};

var SwitchScrollModeDecorator = function (_a) {
    var children = _a.children, mode = _a.mode, onClick = _a.onClick;
    var l10n = React.useContext(core.LocalizationContext);
    var label = '';
    var icon = React__default['default'].createElement(VerticalScrollingIcon, null);
    switch (mode) {
        case ScrollMode$1.Horizontal:
            label = (l10n && l10n.scrollMode
                ? l10n.scrollMode.horizontalScrolling
                : 'Horizontal scrolling');
            icon = React__default['default'].createElement(HorizontalScrollingIcon, null);
            break;
        case ScrollMode$1.Wrapped:
            label = (l10n && l10n.scrollMode
                ? l10n.scrollMode.wrappedScrolling
                : 'Wrapped scrolling');
            icon = React__default['default'].createElement(WrappedScrollingIcon, null);
            break;
        case ScrollMode$1.Vertical:
        default:
            label = (l10n && l10n.scrollMode
                ? l10n.scrollMode.verticalScrolling
                : 'Vertical scrolling');
            icon = React__default['default'].createElement(VerticalScrollingIcon, null);
            break;
    }
    return children({ icon: icon, label: label, onClick: onClick });
};

var TOOLTIP_OFFSET = { left: 0, top: 8 };
var SwitchScrollModeButton = function (_a) {
    var isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
    return (React__default['default'].createElement(SwitchScrollModeDecorator, { mode: mode, onClick: onClick }, function (props) { return (React__default['default'].createElement(core.Tooltip, { position: core.Position.BottomCenter, target: React__default['default'].createElement(core.Button, { isSelected: isSelected, onClick: props.onClick }, props.icon), content: function () { return props.label; }, offset: TOOLTIP_OFFSET })); }));
};

var useScrollMode = function (store) {
    var _a = React.useState(store.get('scrollMode') || ScrollMode$1.Vertical), scrollMode = _a[0], setScrollMode = _a[1];
    var switchTo = function (newScrollMode) {
        var pagesRef = store.get('getPagesRef');
        if (!pagesRef) {
            return;
        }
        var pagesEle = pagesRef().current;
        if (!pagesEle) {
            return;
        }
        switch (newScrollMode) {
            case ScrollMode$1.Vertical:
                pagesEle.classList.add('rpv-scroll-mode-vertical');
                pagesEle.classList.remove('rpv-scroll-mode-horizontal');
                pagesEle.classList.remove('rpv-scroll-mode-wrapped');
                break;
            case ScrollMode$1.Horizontal:
                pagesEle.classList.add('rpv-scroll-mode-horizontal');
                pagesEle.classList.remove('rpv-scroll-mode-vertical');
                pagesEle.classList.remove('rpv-scroll-mode-wrapped');
                break;
            case ScrollMode$1.Wrapped:
                pagesEle.classList.add('rpv-scroll-mode-wrapped');
                pagesEle.classList.remove('rpv-scroll-mode-vertical');
                pagesEle.classList.remove('rpv-scroll-mode-horizontal');
                break;
        }
        store.update('scrollMode', newScrollMode);
    };
    var handleScrollModeChanged = function (newScrollMode) {
        setScrollMode(newScrollMode);
    };
    React.useEffect(function () {
        store.subscribe('scrollMode', handleScrollModeChanged);
        return function () {
            store.unsubscribe('scrollMode', handleScrollModeChanged);
        };
    }, []);
    return { scrollMode: scrollMode, switchTo: switchTo };
};

var SwitchScrollMode = function (_a) {
    var children = _a.children, mode = _a.mode, store = _a.store;
    var _b = useScrollMode(store), scrollMode = _b.scrollMode, switchTo = _b.switchTo;
    var onClick = function () { return switchTo(mode); };
    var isSelected = scrollMode === mode;
    var defaultChildren = function (props) { return (React__default['default'].createElement(SwitchScrollModeButton, { isSelected: isSelected, mode: props.mode, onClick: props.onClick })); };
    var render = children || defaultChildren;
    return render({
        isSelected: isSelected,
        mode: mode,
        onClick: onClick,
    });
};

var SwitchScrollModeMenuItem = function (_a) {
    var isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
    return (React__default['default'].createElement(SwitchScrollModeDecorator, { mode: mode, onClick: onClick }, function (props) { return (React__default['default'].createElement(core.MenuItem, { checked: isSelected, icon: props.icon, onClick: props.onClick }, props.label)); }));
};

var Tracker = function (_a) {
    var store = _a.store;
    var switchTo = useScrollMode(store).switchTo;
    var handlePagesRef = function (pagesRefFn) {
        var pagesEle = pagesRefFn().current;
        if (!pagesEle) {
            return;
        }
        var scrollMode = store.get('scrollMode') || ScrollMode$1.Vertical;
        if (scrollMode !== ScrollMode$1.Vertical) {
            switchTo(scrollMode);
        }
    };
    React.useEffect(function () {
        store.subscribe('getPagesRef', handlePagesRef);
        return function () {
            store.unsubscribe('getPagesRef', handlePagesRef);
        };
    }, []);
    return React__default['default'].createElement(React__default['default'].Fragment, null);
};

var scrollModePlugin = function (props) {
    var store = core.createStore({
        scrollMode: props && props.scrollMode ? props.scrollMode : ScrollMode$1.Vertical,
    });
    var SwitchScrollModeDecorator = function (props) { return (React__default['default'].createElement(SwitchScrollMode, __assign({}, props, { store: store }))); };
    var SwitchScrollModeButtonDecorator = function (props) { return (React__default['default'].createElement(SwitchScrollModeDecorator, { mode: props.mode }, function (p) { return (React__default['default'].createElement(SwitchScrollModeButton, { isSelected: p.isSelected, mode: p.mode, onClick: function () { p.onClick(); } })); })); };
    var SwitchScrollModeMenuItemDecorator = function (props) { return (React__default['default'].createElement(SwitchScrollModeDecorator, { mode: props.mode }, function (p) { return (React__default['default'].createElement(SwitchScrollModeMenuItem, { isSelected: p.isSelected, mode: p.mode, onClick: function () { p.onClick(); props.onClick(); } })); })); };
    var renderViewer = function (props) {
        var currentSlot = props.slot;
        if (currentSlot && currentSlot.children) {
            currentSlot.children = (React__default['default'].createElement(React__default['default'].Fragment, null,
                React__default['default'].createElement(Tracker, { store: store }),
                currentSlot.children));
        }
        return currentSlot;
    };
    return {
        install: function (pluginFunctions) {
            store.update('getPagesRef', pluginFunctions.getPagesRef);
        },
        renderViewer: renderViewer,
        SwitchScrollMode: SwitchScrollModeDecorator,
        SwitchScrollModeButton: SwitchScrollModeButtonDecorator,
        SwitchScrollModeMenuItem: SwitchScrollModeMenuItemDecorator,
    };
};

exports.HorizontalScrollingIcon = HorizontalScrollingIcon;
exports.ScrollMode = ScrollMode$1;
exports.VerticalScrollingIcon = VerticalScrollingIcon;
exports.WrappedScrollingIcon = WrappedScrollingIcon;
exports.scrollModePlugin = scrollModePlugin;
