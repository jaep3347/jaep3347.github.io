'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@react-pdf-viewer/drop/lib/styles/index.css');
require('@react-pdf-viewer/full-screen/lib/styles/index.css');
require('@react-pdf-viewer/open/lib/styles/index.css');
require('@react-pdf-viewer/page-navigation/lib/styles/index.css');
require('@react-pdf-viewer/print/lib/styles/index.css');
require('@react-pdf-viewer/properties/lib/styles/index.css');
require('@react-pdf-viewer/scroll-mode/lib/styles/index.css');
require('@react-pdf-viewer/search/lib/styles/index.css');
require('@react-pdf-viewer/selection-mode/lib/styles/index.css');
require('@react-pdf-viewer/zoom/lib/styles/index.css');
var React = require('react');
var core = require('@react-pdf-viewer/core');
var scrollMode = require('@react-pdf-viewer/scroll-mode');
var selectionMode = require('@react-pdf-viewer/selection-mode');
var drop = require('@react-pdf-viewer/drop');
var fullScreen = require('@react-pdf-viewer/full-screen');
var getFile = require('@react-pdf-viewer/get-file');
var open = require('@react-pdf-viewer/open');
var pageNavigation = require('@react-pdf-viewer/page-navigation');
var print = require('@react-pdf-viewer/print');
var properties = require('@react-pdf-viewer/properties');
var rotate = require('@react-pdf-viewer/rotate');
var search = require('@react-pdf-viewer/search');
var zoom = require('@react-pdf-viewer/zoom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var MoreIcon = function () {
    return (React__default['default'].createElement(core.Icon, { size: 16 },
        React__default['default'].createElement("path", { d: "M12,0.5c1.381,0,2.5,1.119,2.5,2.5S13.381,5.5,12,5.5S9.5,4.381,9.5,3S10.619,0.5,12,0.5z\n                M12,9.5\n                c1.381,0,2.5,1.119,2.5,2.5s-1.119,2.5-2.5,2.5S9.5,13.381,9.5,12S10.619,9.5,12,9.5z\n                M12,18.5c1.381,0,2.5,1.119,2.5,2.5\n                s-1.119,2.5-2.5,2.5S9.5,22.381,9.5,21S10.619,18.5,12,18.5z" })));
};

var PORTAL_OFFSET = { left: 0, top: 8 };
var MoreActionsPopover = function (_a) {
    var toolbarSlot = _a.toolbarSlot;
    var l10n = React.useContext(core.LocalizationContext);
    var GoToFirstPageMenuItem = toolbarSlot.GoToFirstPageMenuItem, GoToLastPageMenuItem = toolbarSlot.GoToLastPageMenuItem, RotateBackwardMenuItem = toolbarSlot.RotateBackwardMenuItem, RotateForwardMenuItem = toolbarSlot.RotateForwardMenuItem, ShowPropertiesMenuItem = toolbarSlot.ShowPropertiesMenuItem, SwitchScrollModeMenuItem = toolbarSlot.SwitchScrollModeMenuItem, SwitchSelectionModeMenuItem = toolbarSlot.SwitchSelectionModeMenuItem;
    var renderTarget = function (toggle, opened) {
        var label = l10n && l10n.toolbar ? l10n.toolbar.moreActions : 'More actions';
        return (React__default['default'].createElement(core.Tooltip, { position: core.Position.BottomRight, target: React__default['default'].createElement(core.Button, { onClick: toggle, isSelected: opened },
                React__default['default'].createElement(MoreIcon, null)), content: function () { return label; }, offset: PORTAL_OFFSET }));
    };
    var renderContent = function (toggle) {
        return (React__default['default'].createElement(core.Menu, null,
            React__default['default'].createElement(GoToFirstPageMenuItem, { onClick: toggle }),
            React__default['default'].createElement(GoToLastPageMenuItem, { onClick: toggle }),
            React__default['default'].createElement(core.MenuDivider, null),
            React__default['default'].createElement(RotateForwardMenuItem, { onClick: toggle }),
            React__default['default'].createElement(RotateBackwardMenuItem, { onClick: toggle }),
            React__default['default'].createElement(core.MenuDivider, null),
            React__default['default'].createElement(SwitchSelectionModeMenuItem, { mode: selectionMode.SelectionMode.Text, onClick: toggle }),
            React__default['default'].createElement(SwitchSelectionModeMenuItem, { mode: selectionMode.SelectionMode.Hand, onClick: toggle }),
            React__default['default'].createElement(core.MenuDivider, null),
            React__default['default'].createElement(SwitchScrollModeMenuItem, { mode: scrollMode.ScrollMode.Vertical, onClick: toggle }),
            React__default['default'].createElement(SwitchScrollModeMenuItem, { mode: scrollMode.ScrollMode.Horizontal, onClick: toggle }),
            React__default['default'].createElement(SwitchScrollModeMenuItem, { mode: scrollMode.ScrollMode.Wrapped, onClick: toggle }),
            React__default['default'].createElement(core.MenuDivider, null),
            React__default['default'].createElement(ShowPropertiesMenuItem, { onClick: toggle })));
    };
    return (React__default['default'].createElement(core.Popover, { position: core.Position.BottomRight, target: renderTarget, content: renderContent, offset: PORTAL_OFFSET, closeOnClickOutside: true, closeOnEscape: true }));
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var defaultToolbar = function (toolbarSlot) {
    var CurrentPageInput = toolbarSlot.CurrentPageInput, Download = toolbarSlot.Download, EnterFullScreen = toolbarSlot.EnterFullScreen, GoToNextPage = toolbarSlot.GoToNextPage, GoToPreviousPage = toolbarSlot.GoToPreviousPage, NumberOfPages = toolbarSlot.NumberOfPages, Open = toolbarSlot.Open, Print = toolbarSlot.Print, ShowSearchPopover = toolbarSlot.ShowSearchPopover, Zoom = toolbarSlot.Zoom, ZoomIn = toolbarSlot.ZoomIn, ZoomOut = toolbarSlot.ZoomOut;
    return (React__default['default'].createElement("div", { className: 'rpv-toolbar' },
        React__default['default'].createElement("div", { className: 'rpv-toolbar-left' },
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(ShowSearchPopover, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(GoToPreviousPage, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(CurrentPageInput, null),
                " / ",
                React__default['default'].createElement(NumberOfPages, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(GoToNextPage, null))),
        React__default['default'].createElement("div", { className: 'rpv-toolbar-center' },
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(ZoomOut, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(Zoom, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(ZoomIn, null))),
        React__default['default'].createElement("div", { className: 'rpv-toolbar-right' },
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(EnterFullScreen, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(Open, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(Download, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(Print, null)),
            React__default['default'].createElement("div", { className: 'rpv-toolbar-item' },
                React__default['default'].createElement(MoreActionsPopover, { toolbarSlot: toolbarSlot })))));
};

var Toolbar = function (_a) {
    var children = _a.children, slot = _a.slot;
    var render = children || defaultToolbar;
    return render(slot);
};

var toolbarPlugin = function (props) {
    var dropPluginInstance = drop.dropPlugin();
    var fullScreenPluginInstance = fullScreen.fullScreenPlugin();
    var getFilePluginInstance = getFile.getFilePlugin(props ? props.getFilePlugin : {});
    var openPluginInstance = open.openPlugin();
    var pageNavigationPluginInstance = pageNavigation.pageNavigationPlugin();
    var printPluginInstance = print.printPlugin();
    var propertiesPluginInstance = properties.propertiesPlugin();
    var rotatePluginInstance = rotate.rotatePlugin();
    var scrollModePluginInstance = scrollMode.scrollModePlugin(props ? props.scrollModePlugin : {});
    var searchPluginInstance = search.searchPlugin(props ? props.searchPlugin : {});
    var selectionModePluginInstance = selectionMode.selectionModePlugin(props ? props.selectionModePlugin : {});
    var zoomPluginInstance = zoom.zoomPlugin();
    var plugins = [
        dropPluginInstance,
        fullScreenPluginInstance,
        getFilePluginInstance,
        openPluginInstance,
        pageNavigationPluginInstance,
        printPluginInstance,
        propertiesPluginInstance,
        rotatePluginInstance,
        scrollModePluginInstance,
        searchPluginInstance,
        selectionModePluginInstance,
        zoomPluginInstance,
    ];
    var ToolbarDecorator = function (props) {
        var EnterFullScreen = fullScreenPluginInstance.EnterFullScreen;
        var Download = getFilePluginInstance.Download;
        var Open = openPluginInstance.Open;
        var CurrentPageInput = pageNavigationPluginInstance.CurrentPageInput, CurrentPageLabel = pageNavigationPluginInstance.CurrentPageLabel, GoToFirstPage = pageNavigationPluginInstance.GoToFirstPage, GoToFirstPageMenuItem = pageNavigationPluginInstance.GoToFirstPageMenuItem, GoToLastPage = pageNavigationPluginInstance.GoToLastPage, GoToLastPageMenuItem = pageNavigationPluginInstance.GoToLastPageMenuItem, GoToNextPage = pageNavigationPluginInstance.GoToNextPage, GoToPreviousPage = pageNavigationPluginInstance.GoToPreviousPage;
        var Print = printPluginInstance.Print;
        var ShowProperties = propertiesPluginInstance.ShowProperties, ShowPropertiesMenuItem = propertiesPluginInstance.ShowPropertiesMenuItem;
        var Rotate = rotatePluginInstance.Rotate, RotateBackwardMenuItem = rotatePluginInstance.RotateBackwardMenuItem, RotateForwardMenuItem = rotatePluginInstance.RotateForwardMenuItem;
        var SwitchScrollMode = scrollModePluginInstance.SwitchScrollMode, SwitchScrollModeMenuItem = scrollModePluginInstance.SwitchScrollModeMenuItem;
        var Search = searchPluginInstance.Search, ShowSearchPopover = searchPluginInstance.ShowSearchPopover;
        var SwitchSelectionMode = selectionModePluginInstance.SwitchSelectionMode, SwitchSelectionModeMenuItem = selectionModePluginInstance.SwitchSelectionModeMenuItem;
        var CurrentScale = zoomPluginInstance.CurrentScale, Zoom = zoomPluginInstance.Zoom, ZoomIn = zoomPluginInstance.ZoomIn, ZoomOut = zoomPluginInstance.ZoomOut;
        var NumberOfPages = function () { return (React__default['default'].createElement(CurrentPageLabel, null, function (props) { return React__default['default'].createElement(React__default['default'].Fragment, null, props.numberOfPages); })); };
        return (React__default['default'].createElement(Toolbar, __assign({}, props, { slot: {
                CurrentPageInput: CurrentPageInput,
                CurrentPageLabel: CurrentPageLabel,
                CurrentScale: CurrentScale,
                Download: Download,
                EnterFullScreen: EnterFullScreen,
                GoToFirstPage: GoToFirstPage,
                GoToFirstPageMenuItem: GoToFirstPageMenuItem,
                GoToLastPage: GoToLastPage,
                GoToLastPageMenuItem: GoToLastPageMenuItem,
                GoToNextPage: GoToNextPage,
                GoToPreviousPage: GoToPreviousPage,
                NumberOfPages: NumberOfPages,
                Open: Open,
                Print: Print,
                Rotate: Rotate,
                RotateBackwardMenuItem: RotateBackwardMenuItem,
                RotateForwardMenuItem: RotateForwardMenuItem,
                Search: Search,
                ShowProperties: ShowProperties,
                ShowPropertiesMenuItem: ShowPropertiesMenuItem,
                ShowSearchPopover: ShowSearchPopover,
                SwitchScrollMode: SwitchScrollMode,
                SwitchScrollModeMenuItem: SwitchScrollModeMenuItem,
                SwitchSelectionMode: SwitchSelectionMode,
                SwitchSelectionModeMenuItem: SwitchSelectionModeMenuItem,
                Zoom: Zoom,
                ZoomIn: ZoomIn,
                ZoomOut: ZoomOut,
            } })));
    };
    return {
        install: function (pluginFunctions) {
            plugins.forEach(function (plugin) {
                if (plugin.install) {
                    plugin.install(pluginFunctions);
                }
            });
        },
        renderViewer: function (props) {
            var slot = props.slot;
            plugins.forEach(function (plugin) {
                if (plugin.renderViewer) {
                    slot = plugin.renderViewer(__assign(__assign({}, props), { slot: slot }));
                }
            });
            return slot;
        },
        uninstall: function (pluginFunctions) {
            plugins.forEach(function (plugin) {
                if (plugin.uninstall) {
                    plugin.uninstall(pluginFunctions);
                }
            });
        },
        onDocumentLoad: function (props) {
            plugins.forEach(function (plugin) {
                if (plugin.onDocumentLoad) {
                    plugin.onDocumentLoad(props);
                }
            });
        },
        onTextLayerRender: function (props) {
            plugins.forEach(function (plugin) {
                if (plugin.onTextLayerRender) {
                    plugin.onTextLayerRender(props);
                }
            });
        },
        onViewerStateChange: function (viewerState) {
            var newState = viewerState;
            plugins.forEach(function (plugin) {
                if (plugin.onViewerStateChange) {
                    newState = plugin.onViewerStateChange(newState);
                }
            });
            return newState;
        },
        Toolbar: ToolbarDecorator,
    };
};

exports.MoreActionsPopover = MoreActionsPopover;
exports.MoreIcon = MoreIcon;
exports.toolbarPlugin = toolbarPlugin;
