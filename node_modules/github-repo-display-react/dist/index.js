function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var Axios = _interopDefault(require('axios'));

var styles = {"repoContainer":"_2ICZP","title":"_2KezC","description":"_2beoD","languages":"_3lNOW","star":"_2Hl1u","options":"_1p3r7","textUpdated":"_2t70U"};

function removeDash(string) {
  return string.replace(/-/g, " ");
}

function sortByMostRecentDate(repos) {
  if (repos !== undefined) return repos.sort(function (a, b) {
    return +new Date(b.updated_at) - +new Date(a.updated_at);
  });
}

function convertToHours(seconds) {
  if (seconds >= 63072000) return Math.floor(seconds / 31536000) + " years ago";
  if (seconds >= 31536000) return Math.floor(seconds / 31536000) + " year ago";
  if (seconds >= 5184000) return Math.floor(seconds / 2592000) + " months ago";
  if (seconds >= 2592000) return Math.floor(seconds / 2592000) + " month ago";
  if (seconds >= 1209600) return Math.floor(seconds / 604800) + " weeks ago";
  if (seconds >= 604800) return Math.floor(seconds / 604800) + " week ago";
  if (seconds >= 172800) return Math.floor(seconds / 86400) + " days ago";
  if (seconds >= 86400) return Math.floor(seconds / 86400) + " day ago";
  if (seconds >= 7200) return Math.floor(seconds / 3600) + " hours ago";
  if (seconds >= 3600) return Math.floor(seconds / 3600) + " hour ago";
  if (seconds >= 120) return Math.floor(seconds / 60) + " minutes ago";
  if (seconds >= 60) return Math.floor(seconds / 60) + " minute ago";
  if (seconds < 60) return Math.floor(seconds) + " seconds ago";
}

function arrayToLength(array, length) {
  if (array) return array.splice(0, length);
}

var getRemainingSeconds = function getRemainingSeconds(previousDate, currentDate) {
  return Math.floor((currentDate - previousDate) / 1000);
};

var Star = require("./githubStar~xnsYiqzt.png");

function DisplaySortedRepoData(_ref) {
  var repoData = _ref.repoData,
      numOfrepos = _ref.numOfrepos,
      showStars = _ref.showStars,
      showLanguage = _ref.showLanguage;
  var sortedRepos = sortByMostRecentDate(repoData);
  var sortedAndReducedRepos = arrayToLength(sortedRepos, numOfrepos);
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles.repoContainer
  }, sortedAndReducedRepos ? sortedAndReducedRepos.map(function (repo) {
    return /*#__PURE__*/React__default.createElement("ul", {
      key: repo.id
    }, /*#__PURE__*/React__default.createElement("li", null, /*#__PURE__*/React__default.createElement("a", {
      id: "title",
      className: styles.title,
      href: repo.html_url,
      target: "_blank",
      rel: "noopener noreferrer"
    }, removeDash(repo.name))), /*#__PURE__*/React__default.createElement("li", {
      id: "description",
      className: styles.description
    }, repo.description), /*#__PURE__*/React__default.createElement("div", {
      id: "options",
      className: styles.options
    }, showLanguage ? /*#__PURE__*/React__default.createElement("li", {
      id: "language",
      className: styles.languages
    }, repo.language) : null, showStars ? /*#__PURE__*/React__default.createElement("li", null, /*#__PURE__*/React__default.createElement("img", {
      src: Star,
      alt: "star",
      className: styles.star
    }), repo.stargazers_count) : null), /*#__PURE__*/React__default.createElement("li", {
      id: "text-updated",
      className: styles.textUpdated
    }, "updated", " ", convertToHours(getRemainingSeconds(new Date(repo.updated_at), Date.now()))));
  }) : null);
}

var fetchApiData = function fetchApiData(username) {
  try {
    return Promise.resolve(Axios.get("https://api.github.com/users/" + username + "/repos")).then(function (response) {
      return response.data;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

function GetRepoData(_ref) {
  var userName = _ref.userName,
      numOfrepos = _ref.numOfrepos,
      showStars = _ref.showStars,
      showLanguage = _ref.showLanguage;

  var _useState = React.useState([]),
      repoData = _useState[0],
      setRepoData = _useState[1];

  React.useEffect(function () {
    fetchApiData(userName).then(setRepoData);
  }, [userName]);
  return /*#__PURE__*/React__default.createElement(DisplaySortedRepoData, {
    showLanguage: showLanguage,
    showStars: showStars,
    numOfrepos: numOfrepos,
    repoData: repoData
  });
}

var GithubRepoDisplay = function GithubRepoDisplay(_ref) {
  var userName = _ref.userName,
      numOfrepos = _ref.numOfrepos,
      showStars = _ref.showStars,
      showLanguage = _ref.showLanguage;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles.container
  }, " ", /*#__PURE__*/React__default.createElement(GetRepoData, {
    showStars: showStars,
    numOfrepos: numOfrepos,
    userName: userName,
    showLanguage: showLanguage
  }));
};

exports.GithubRepoDisplay = GithubRepoDisplay;
//# sourceMappingURL=index.js.map
